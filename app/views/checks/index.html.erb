<div class="vscode-container">
  <!-- Title Bar -->
  <div class="titlebar">
    <div class="window-controls">
      <div class="window-dot red"></div>
      <div class="window-dot yellow"></div>
      <div class="window-dot green"></div>
    </div>
    <% if @is_running %>
      <%= form_with url: cancel_check_path, method: :post, local: true, data: { turbo: false, confirm: "実行中のテストを中止しますか？" }, class: "search-bar", style: "display: flex; align-items: center; gap: 8px;" do |f| %>
        <div style="flex: 1; position: relative;">
          <input type="text" value="チェック実行中..." readonly style="width: 100%;">
        </div>
        <%= button_tag type: 'submit', style: "background: none; border: none; color: #f48771; cursor: pointer; font-size: 18px; padding: 0; line-height: 1; transition: color 0.1s;", onmouseover: "this.style.color='#ff5555'", onmouseout: "this.style.color='#f48771'" do %>
          ■
        <% end %>
      <% end %>
    <% else %>
      <%= form_with url: checks_path, method: :post, local: true, data: { turbo: false }, class: "search-bar search-form-index", style: "display: flex; align-items: center; gap: 8px;" do |f| %>
        <div style="flex: 1; position: relative;" class="search-input-wrapper">
          <%= text_field_tag :target_url, "", placeholder: "Protospace Checker - URLを入力してください", class: "search-input-field", style: "width: 100%;" %>
        </div>
        <%= button_tag type: 'submit', style: "background: none; border: none; color: #89d185; cursor: pointer; font-size: 18px; padding: 0; line-height: 1; transition: color 0.1s;", onmouseover: "this.style.color='#55ff55'", onmouseout: "this.style.color='#89d185'" do %>
          ▶
        <% end %>
      <% end %>
    <% end %>
  </div>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Activity Bar -->
    <div class="activity-bar">
      <div class="activity-icon active" id="files-icon">
        <span>📁</span>
      </div>
      <div class="activity-icon" id="settings-icon">
        <span>⚙</span>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-resize-handle"></div>
      <div class="sidebar-header">
        エクスプローラー
      </div>
      <div class="sidebar-section">
        <div class="sidebar-section-title">
          <span class="chevron">▼</span>
          <span>CHECKER</span>
        </div>
        <div class="sidebar-item selected" data-view="readme">
          <span class="file-icon">📄</span>
          <span>README</span>
        </div>
        <div class="sidebar-item" data-view="results">
          <span class="file-icon">📄</span>
          <span>results.json</span>
        </div>
      </div>
      <div class="sidebar-section" data-screenshot-section="true">
        <div class="sidebar-section-title">
          <span class="chevron">▼</span>
          <span>SCREENSHOTS</span>
        </div>
      </div>
      <div class="sidebar-section" data-error-screenshot-section="true">
        <div class="sidebar-section-title">
          <span class="chevron">▼</span>
          <span>FAILURE_SCREENSHOTS</span>
        </div>
      </div>
    </div>

    <!-- Editor Area -->
    <div class="editor-container">
      <div class="tab-bar">
        <div class="tab active">
          <span>📄</span>
          <span>README</span>
        </div>
      </div>
      <div class="editor-content">
        <h1 style="color: #4ec9b0; font-size: 28px; margin-bottom: 20px;">🔍 Protospace Checker</h1>

        <div style="margin-bottom: 30px;">
          <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">概要</h2>
          <p style="color: #cccccc; line-height: 1.8; margin-bottom: 16px;">
            Protospace CheckerはTECH CAMP課題「Protospace」の実装要件を自動的に検証するツールです。<br>
            Seleniumを使用してブラウザ操作を自動化し、各機能が正しく実装されているかをチェックします。
          </p>
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">主な機能</h2>
          <ul style="color: #cccccc; line-height: 2; margin-left: 20px;">
            <li>✅ ユーザー新規登録・ログイン機能の検証</li>
            <li>✅ プロトタイプ投稿・編集・削除機能の検証</li>
            <li>✅ コメント投稿機能の検証</li>
            <li>✅ ユーザー詳細ページの検証</li>
            <li>📸 各ページのスクリーンショット自動取得</li>
            <li>🔄 リアルタイムでの進捗表示</li>
            <li>⏸️ チェック実行の途中停止機能</li>
          </ul>
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">使い方</h2>
          <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px; margin-bottom: 16px;">
            <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 1</div>
            <p style="color: #cccccc; line-height: 1.8;">
              上部の検索バーに、チェック対象のProtospaceアプリケーションのURLを入力してください。<br>
              <span style="color: #ce9178;">例: https://protospace2020.herokuapp.com/</span>
            </p>
          </div>

          <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px; margin-bottom: 16px;">
            <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 2</div>
            <p style="color: #cccccc; line-height: 1.8;">
              緑色の再生ボタン <span style="color: #27c93f; font-weight: bold;">▶</span> をクリックしてチェックを開始します。
            </p>
          </div>

          <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px; margin-bottom: 16px;">
            <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 3</div>
            <p style="color: #cccccc; line-height: 1.8;">
              下部のターミナルで進捗を確認しながら、結果を待ちます。<br>
              途中で停止したい場合は、赤色の停止ボタン <span style="color: #c93333; font-weight: bold;">■</span> をクリックしてください。
            </p>
          </div>

          <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px;">
            <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 4</div>
            <p style="color: #cccccc; line-height: 1.8;">
              チェック完了後、結果ページで各項目の合格/不合格を確認できます。<br>
              サイドバーのSCREENSHOTSセクションから、各ページのスクリーンショットも確認可能です。
            </p>
          </div>
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">注意事項</h2>
          <div style="background-color: #3c2a1e; border-left: 3px solid #c9a000; padding: 16px; border-radius: 4px;">
            <p style="color: #dcdcaa; line-height: 1.8; margin-bottom: 8px;">
              ⚠️ チェック対象のアプリケーションが起動していることを確認してください
            </p>
            <p style="color: #dcdcaa; line-height: 1.8; margin-bottom: 8px;">
              ⚠️ データベースがリセット可能な状態であることを確認してください
            </p>
            <p style="color: #dcdcaa; line-height: 1.8;">
              ⚠️ チェック実行中は対象アプリケーションを操作しないでください
            </p>
          </div>
        </div>

        <% if @all_registered_users && @all_registered_users.any? %>
          <div style="margin-top: 30px; padding: 20px; background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px;">
            <h2 style="color: #4ec9b0; font-size: 18px; margin-bottom: 15px;">📋 登録済みユーザー情報</h2>
            <p style="color: #858585; margin-bottom: 15px; font-size: 13px;">チェック実行時に自動登録されたユーザー情報です</p>
            <% @all_registered_users.each_with_index do |user, index| %>
              <div style="margin-bottom: 15px; padding: 12px; background-color: #252526; border-left: 3px solid #007acc; border-radius: 2px;">
                <div style="color: #9cdcfe; font-weight: bold; margin-bottom: 5px;">ユーザー <%= index + 1 %></div>
                <div style="color: #ce9178; margin-bottom: 3px;">Email: <%= user[:email] %></div>
                <div style="color: #ce9178;">Password: <%= user[:password] %></div>
              </div>
            <% end %>
          </div>
        <% end %>

        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #3c3c3c;">
          <p style="color: #858585; font-size: 12px; text-align: center;">
            Protospace Checker v1.0 | Built with Ruby on Rails & Selenium
          </p>
        </div>
      </div>

      <!-- Bottom Panel (Terminal) -->
      <div class="panel">
        <div class="panel-resize-handle"></div>
        <div class="panel-header">
          <div class="panel-tab">問題</div>
          <div class="panel-tab">出力</div>
          <div class="panel-tab">デバッグ コンソール</div>
          <div class="panel-tab active">ターミナル</div>
          <div class="panel-tab">ポート</div>
          <div class="panel-controls">
            <span class="panel-control panel-toggle">⌄</span>
          </div>
        </div>
        <div class="panel-content">
          <%= form_with url: checks_path, method: :post, local: true, data: { turbo: false } do |f| %>
            <div class="terminal-input-line">
              <span class="terminal-prompt">$</span>
              <%= text_field_tag :target_url, "", class: "terminal-input", placeholder: "", required: true, autofocus: true %>
            </div>
            <%= submit_tag "送信", style: "display: none;" %>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Status Bar -->
  <div class="status-bar">
    <div class="status-item">⎇ main</div>
    <div class="status-item">✓ 0</div>
    <div class="status-item">⚠ 0</div>
    <div class="status-bar-right">
      <div class="status-item">Ruby</div>
      <div class="status-item">UTF-8</div>
      <div class="status-item">LF</div>
    </div>
  </div>
</div>

<script>
  // サイドバーセクションの開閉機能
  document.addEventListener('DOMContentLoaded', function() {
    // URL入力欄のバリデーション（震えるアニメーション）
    const searchForm = document.querySelector('.search-form-index');
    if (searchForm) {
      searchForm.addEventListener('submit', function(e) {
        const inputField = this.querySelector('.search-input-field');
        const inputWrapper = this.querySelector('.search-input-wrapper');
        const value = inputField ? inputField.value.trim() : '';

        // 空欄チェック
        if (!value) {
          e.preventDefault();
          shakeInput(inputWrapper, inputField);
          return;
        }

        // URL形式チェック（http://またはhttps://で始まるか）
        if (!value.match(/^https?:\/\/.+/i)) {
          e.preventDefault();
          shakeInput(inputWrapper, inputField);
          return;
        }
      });
    }

    function shakeInput(wrapper, field) {
      // 既存のshakeクラスを削除（アニメーションをリセット）
      wrapper.classList.remove('shake');

      // 少し待ってからshakeクラスを追加（アニメーションを再トリガー）
      setTimeout(() => {
        wrapper.classList.add('shake');
      }, 10);

      // アニメーション終了後にクラスを削除
      setTimeout(() => {
        wrapper.classList.remove('shake');
      }, 510);

      // 入力欄にフォーカス
      field.focus();
    }

    const sidebarItems = document.querySelectorAll('.sidebar-item');
    const editorContent = document.querySelector('.editor-content');
    const tabBar = document.querySelector('.tab-bar');

    // 元のREADMEコンテンツを保存
    const readmeContent = editorContent.innerHTML;
    const readmeTab = tabBar.innerHTML;

    // results.jsonのコンテンツ
    const resultsContent = `
      <h1 style="color: #4ec9b0; font-size: 28px; margin-bottom: 20px;">📊 チェック結果</h1>

      <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 20px; margin-bottom: 20px;">
        <div style="color: #858585; font-size: 14px; margin-bottom: 12px;">Status</div>
        <div style="color: #dcdcaa; font-size: 16px; margin-bottom: 20px;">
          <span style="font-weight: bold;">待機中</span> - チェックが実行されていません
        </div>

        <div style="color: #858585; font-size: 14px; margin-bottom: 12px;">Results</div>
        <div style="color: #cccccc; font-size: 14px;">
          <code style="background-color: #252526; padding: 12px; display: block; border-radius: 4px; font-family: 'Courier New', monospace;">
{<br>
&nbsp;&nbsp;"status": "pending",<br>
&nbsp;&nbsp;"results": [],<br>
&nbsp;&nbsp;"total_checks": 0,<br>
&nbsp;&nbsp;"passed": 0,<br>
&nbsp;&nbsp;"failed": 0,<br>
&nbsp;&nbsp;"errors": 0<br>
}
          </code>
        </div>
      </div>

      <div style="margin-top: 30px; padding: 16px; background-color: #3c2a1e; border-left: 3px solid #c9a000; border-radius: 4px;">
        <p style="color: #dcdcaa; line-height: 1.8;">
          💡 上部の検索バーにURLを入力して、緑色の再生ボタン <span style="color: #27c93f; font-weight: bold;">▶</span> をクリックするとチェックが開始されます。
        </p>
      </div>
    `;

    const sectionTitles = document.querySelectorAll('.sidebar-section-title');
    sectionTitles.forEach(title => {
      title.addEventListener('click', function() {
        const section = this.parentElement;
        const chevron = this.querySelector('.chevron');
        const items = Array.from(section.children).filter(child => child.classList.contains('sidebar-item'));

        // 開閉状態をトグル
        const isCollapsed = section.classList.toggle('collapsed');

        if (isCollapsed) {
          chevron.textContent = '▶';
          items.forEach(item => item.style.display = 'none');
        } else {
          chevron.textContent = '▼';
          items.forEach(item => item.style.display = 'flex');
        }
      });

      // カーソルをポインターに
      title.style.cursor = 'pointer';
    });

    // サイドバー項目のクリックイベント
    sidebarItems.forEach(item => {
      item.addEventListener('click', function() {
        // 選択状態を更新
        sidebarItems.forEach(i => i.classList.remove('selected'));
        this.classList.add('selected');

        const viewType = this.getAttribute('data-view');

        if (viewType === 'readme') {
          // タブを更新
          tabBar.innerHTML = readmeTab;
          // READMEを表示
          editorContent.innerHTML = readmeContent;
        } else if (viewType === 'results') {
          // タブを更新
          tabBar.innerHTML = `
            <div class="tab active">
              <span>📄</span>
              <span>results.json</span>
            </div>
          `;
          // results.jsonを表示
          editorContent.innerHTML = resultsContent;
        }
      });
    });

    // 設定画面コンテンツ
    const settingsContent = `
      <h1 style="color: #4ec9b0; font-size: 28px; margin-bottom: 20px;">⚙ Settings</h1>

      <div style="margin-bottom: 30px;">
        <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">Checker Settings</h2>
        <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 20px;">
          <div style="margin-bottom: 20px;">
            <label style="color: #cccccc; display: block; margin-bottom: 8px;">Default Timeout (seconds)</label>
            <input type="number" value="30" style="width: 100%; padding: 8px; background: #252526; border: 1px solid #3c3c3c; color: #cccccc; border-radius: 4px;" readonly>
            <p style="color: #858585; font-size: 12px; margin-top: 4px;">Maximum time to wait for elements to load</p>
          </div>

          <div style="margin-bottom: 20px;">
            <label style="color: #cccccc; display: block; margin-bottom: 8px;">Screenshot Quality</label>
            <select style="width: 100%; padding: 8px; background: #252526; border: 1px solid #3c3c3c; color: #cccccc; border-radius: 4px;" disabled>
              <option>High (Default)</option>
              <option>Medium</option>
              <option>Low</option>
            </select>
            <p style="color: #858585; font-size: 12px; margin-top: 4px;">Quality of captured screenshots</p>
          </div>

          <div>
            <label style="color: #cccccc; display: flex; align-items: center; cursor: not-allowed;">
              <input type="checkbox" checked disabled style="margin-right: 8px;">
              <span>Auto-scroll to latest log</span>
            </label>
            <p style="color: #858585; font-size: 12px; margin-top: 4px; margin-left: 24px;">Automatically scroll terminal to show latest output</p>
          </div>
        </div>
      </div>

      <div style="margin-bottom: 30px;">
        <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">Display Settings</h2>
        <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 20px;">
          <div style="margin-bottom: 20px;">
            <label style="color: #cccccc; display: block; margin-bottom: 8px;">Theme</label>
            <select style="width: 100%; padding: 8px; background: #252526; border: 1px solid #3c3c3c; color: #cccccc; border-radius: 4px;" disabled>
              <option>Dark (Default)</option>
              <option>Light</option>
            </select>
          </div>

          <div>
            <label style="color: #cccccc; display: flex; align-items: center; cursor: not-allowed;">
              <input type="checkbox" checked disabled style="margin-right: 8px;">
              <span>Show terminal by default</span>
            </label>
            <p style="color: #858585; font-size: 12px; margin-top: 4px; margin-left: 24px;">Display terminal panel when page loads</p>
          </div>
        </div>
      </div>

      <div style="margin-top: 40px; padding: 20px; background-color: #3c2a1e; border-left: 3px solid #c9a000; border-radius: 4px;">
        <p style="color: #dcdcaa; line-height: 1.8;">
          ⚠️ These settings are currently read-only and display default values. Configuration options may be added in future updates.
        </p>
      </div>
    `;

    // Activity Barのアイコンクリックイベント
    const filesIcon = document.getElementById('files-icon');
    const settingsIcon = document.getElementById('settings-icon');
    const sidebar = document.querySelector('.sidebar');

    // 元のコンテンツを保存
    const originalTabContent = tabBar.innerHTML;
    const originalEditorContent = editorContent.innerHTML;

    if (filesIcon) {
      filesIcon.addEventListener('click', function() {
        // フォルダアイコンがアクティブに
        filesIcon.classList.add('active');
        settingsIcon.classList.remove('active');

        // サイドバーを表示
        sidebar.style.display = 'flex';

        // 元のコンテンツに戻す
        tabBar.innerHTML = originalTabContent;
        editorContent.innerHTML = originalEditorContent;
      });
    }

    if (settingsIcon) {
      settingsIcon.addEventListener('click', function() {
        // 設定アイコンがアクティブに
        settingsIcon.classList.add('active');
        filesIcon.classList.remove('active');

        // サイドバーを非表示
        sidebar.style.display = 'none';

        // タブを更新
        tabBar.innerHTML = `
          <div class="tab active">
            <span>⚙</span>
            <span>Settings</span>
          </div>
        `;

        // 設定画面を表示
        editorContent.innerHTML = settingsContent;
      });
    }

    // ターミナルエリアをクリックしたら入力欄にフォーカス
    const panelContent = document.querySelector('.panel-content');
    const terminalInput = document.querySelector('.terminal-input');

    if (panelContent && terminalInput) {
      panelContent.addEventListener('click', function(e) {
        // 入力欄自体をクリックした場合は何もしない
        if (e.target !== terminalInput) {
          terminalInput.focus();
        }
      });
    }

    // パネルの開閉機能
    const panelToggle = document.querySelector('.panel-toggle');
    const panel = document.querySelector('.panel');

    if (panelToggle && panel) {
      let originalHeight = panel.offsetHeight;

      panelToggle.addEventListener('click', function() {
        // ボタンの状態を見て判断
        const isCurrentlyClosed = panelToggle.textContent === '^';

        if (isCurrentlyClosed) {
          // 開く
          panel.style.height = originalHeight + 'px';
          panelToggle.textContent = '⌄';
        } else {
          // 畳む
          originalHeight = panel.offsetHeight;
          panel.style.height = '35px';
          panelToggle.textContent = '^';
        }
      });
    }
  });
</script>
