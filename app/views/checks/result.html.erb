<div class="vscode-container">
  <!-- Title Bar -->
  <div class="titlebar">
    <div class="window-controls">
      <div class="window-dot red"></div>
      <div class="window-dot yellow"></div>
      <div class="window-dot green"></div>
    </div>
    <% if @is_running %>
      <%= form_with url: cancel_check_path, method: :post, local: true, data: { turbo: false, confirm: "実行中のテストを中止しますか？" }, class: "search-bar", style: "display: flex; align-items: center; gap: 8px;" do |f| %>
        <div style="flex: 1; position: relative;">
          <input type="text" value="チェック実行中..." readonly style="width: 100%;">
        </div>
        <%= button_tag type: 'submit', style: "background: none; border: none; color: #f48771; cursor: pointer; font-size: 18px; padding: 0; line-height: 1; transition: color 0.1s;", onmouseover: "this.style.color='#ff5555'", onmouseout: "this.style.color='#f48771'" do %>
          ■
        <% end %>
      <% end %>
    <% else %>
      <%= form_with url: checks_path, method: :post, local: true, data: { turbo: false }, class: "search-bar search-form-result", style: "display: flex; align-items: center; gap: 8px;" do |f| %>
        <div style="flex: 1; position: relative;" class="search-input-wrapper">
          <%= text_field_tag :target_url, "", placeholder: "Protospace挙動確認チェッカー - チェック完了", class: "search-input-field", style: "width: 100%;" %>
        </div>
        <%= button_tag type: 'submit', style: "background: none; border: none; color: #89d185; cursor: pointer; font-size: 18px; padding: 0; line-height: 1; transition: color 0.1s;", onmouseover: "this.style.color='#55ff55'", onmouseout: "this.style.color='#89d185'" do %>
          ▶
        <% end %>
      <% end %>
    <% end %>
  </div>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Activity Bar -->
    <div class="activity-bar">
      <div class="activity-icon active">
        <span>📁</span>
      </div>
      <div class="activity-icon">
        <span>🔍</span>
      </div>
      <div class="activity-icon">
        <span style="font-size: 18px;">⎇</span>
      </div>
      <div class="activity-icon">
        <span>▶</span>
      </div>
      <div class="activity-icon">
        <span>⚙</span>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-resize-handle"></div>
      <div class="sidebar-header">
        エクスプローラー
      </div>
      <div class="sidebar-section">
        <div class="sidebar-section-title">
          <span class="chevron">▼</span>
          <span>RESULTS</span>
        </div>
        <div class="sidebar-item" data-view="readme">
          <span class="file-icon">📄</span>
          <span>README</span>
        </div>
        <div class="sidebar-item selected" data-view="results">
          <span class="file-icon">📄</span>
          <span>check_results.json</span>
        </div>
      </div>
      <div class="sidebar-section" data-screenshot-section="true">
        <div class="sidebar-section-title">
          <span class="chevron">▼</span>
          <span>SCREENSHOTS</span>
        </div>
        <% if @screenshots && @screenshots.any? %>
          <% @screenshots.each do |screenshot| %>
            <div class="sidebar-item" data-view="screenshot" data-screenshot-path="<%= screenshot[:path] %>" data-screenshot-name="<%= screenshot[:name] %>">
              <span class="file-icon">🖼️</span>
              <span><%= screenshot[:name] %></span>
            </div>
          <% end %>
        <% end %>
      </div>
      <div class="sidebar-section" data-failure-screenshot-section="true">
        <div class="sidebar-section-title">
          <span class="chevron">▼</span>
          <span>FAILURE_SCREENSHOTS</span>
        </div>
        <% if @failure_screenshots && @failure_screenshots.any? %>
          <% @failure_screenshots.each do |screenshot| %>
            <div class="sidebar-item" data-view="failure-screenshot" data-screenshot-path="<%= screenshot[:path] %>" data-screenshot-name="<%= screenshot[:name] %>">
              <span class="file-icon">⚠️</span>
              <span><%= screenshot[:name] %></span>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>

    <!-- Editor Area -->
    <div class="editor-container">
      <div class="tab-bar">
        <div class="tab active">
          <span>📄</span>
          <span>check_results.json</span>
        </div>
      </div>
      <div class="editor-content">
        <% if @status == 'running' %>
          <div style="display: flex; align-items: center; gap: 8px;">
            <div class="spinner"></div>
            <h1 style="margin: 0;">チェック実行中...</h1>
          </div>
          <div class="subtitle">下のターミナルで進捗を確認できます。停止する場合は上部の停止ボタンをご利用ください。</div>
        <% else %>
          <h1>チェック結果<% if @status == 'cancelled' %> <span style="color: #dcdcaa; font-size: 16px;">(中止されました)</span><% end %></h1>

          <% if @results && @results.any? %>
            <% pass_count = @results.count { |r| r[:status] == 'PASS' } %>
            <% fail_count = @results.count { |r| r[:status] == 'FAIL' } %>
            <% error_count = @results.count { |r| r[:status] == 'ERROR' } %>

            <div class="summary-box">
              <strong>サマリー:</strong>
              合格: <%= pass_count %> /
              不合格: <%= fail_count %> /
              エラー: <%= error_count %> /
              合計: <%= @results.count %>
            </div>

            <% if @registered_users && @registered_users.any? %>
              <div data-registered-users style="margin-top: 20px; margin-bottom: 30px; padding: 20px; background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px;">
                <h2 style="color: #4ec9b0; font-size: 18px; margin-bottom: 15px;">登録済みユーザー情報</h2>
                <% @registered_users.each_with_index do |user, index| %>
                  <div style="margin-bottom: 15px; padding: 12px; background-color: #252526; border-left: 3px solid #007acc; border-radius: 2px;">
                    <div style="color: #9cdcfe; font-weight: bold; margin-bottom: 5px;">ユーザー <%= index + 1 %></div>
                    <div style="color: #ce9178; margin-bottom: 3px;">Email: <%= user[:email] %></div>
                    <div style="color: #ce9178;">Password: <%= user[:password] %></div>
                  </div>
                <% end %>
              </div>
            <% end %>

            <% @results.each do |result| %>
              <% status_class = result[:status] == 'PASS' ? 'pass' : (result[:status] == 'FAIL' ? 'fail' : 'error') %>
              <div class="result-item <%= status_class %>">
                <div class="result-header">
                  <div class="result-title">
                    <% if result[:status] == 'PASS' %>
                      <span class="text-success">✓</span>
                    <% elsif result[:status] == 'FAIL' %>
                      <span class="text-danger">✗</span>
                    <% else %>
                      <span class="text-warning">!</span>
                    <% end %>
                    <span><%= result[:check_number] %>: <%= result[:description] %></span>
                  </div>
                  <span class="badge badge-<%= result[:status] == 'PASS' ? 'success' : (result[:status] == 'FAIL' ? 'danger' : 'warning') %>">
                    <%= result[:status] %>
                  </span>
                </div>
                <% if result[:note].present? %>
                  <div class="text-muted"><strong>補足:</strong> <%= result[:note] %></div>
                <% end %>
              </div>
            <% end %>
          <% else %>
            <div class="text-muted">チェック結果がありません</div>
          <% end %>
        <% end %>
      </div>

      <!-- Bottom Panel (Terminal) -->
      <div class="panel">
        <div class="panel-resize-handle"></div>
        <div class="panel-header">
          <div class="panel-tab">問題</div>
          <div class="panel-tab">出力</div>
          <div class="panel-tab">デバッグ コンソール</div>
          <div class="panel-tab active">ターミナル</div>
          <div class="panel-tab">ポート</div>
          <div class="panel-controls">
            <span class="panel-control panel-toggle">⌄</span>
          </div>
        </div>
        <div class="panel-content" id="terminal-logs">
          <% if @logs && @logs.any? %>
            <% @logs.each do |log| %>
              <% message = log.is_a?(Hash) ? log[:message] : log %>
              <% log_type = log.is_a?(Hash) ? log[:type] : :info %>
              <div class="terminal-line" data-type="<%= log_type %>">
                <% if log_type == :success %>
                  <span style="color: #89d185;"><%= message %></span>
                <% elsif log_type == :fail %>
                  <span style="color: #f48771;"><%= message %></span>
                <% elsif log_type == :error %>
                  <span style="color: #dcdcaa;"><%= message %></span>
                <% elsif log_type == :progress %>
                  <div class="spinner"></div>
                  <span style="color: #858585;"><%= message %></span>
                <% else %>
                  <span style="color: #cccccc;"><%= message %></span>
                <% end %>
              </div>
            <% end %>
          <% else %>
            <div class="terminal-line">
              <div class="spinner"></div>
              <span style="color: #858585;">チェック実行中...</span>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Status Bar -->
  <div class="status-bar">
    <div class="status-item">⎇ main</div>
    <div class="status-item" id="status-pass">✓ <%= @results ? @results.count { |r| r[:status] == 'PASS' } : 0 %></div>
    <div class="status-item" id="status-fail">⚠ <%= @results ? @results.count { |r| r[:status] != 'PASS' } : 0 %></div>
    <div class="status-bar-right">
      <div class="status-item">JSON</div>
      <div class="status-item">UTF-8</div>
      <div class="status-item">LF</div>
    </div>
  </div>
</div>

<% if @status == 'running' %>
<script>
  (function() {
    const sessionId = '<%= @session_id %>';
    const terminalLogs = document.getElementById('terminal-logs');
    const editorContent = document.querySelector('.editor-content');
    let lastLogCount = 0;
    let currentRegisteredUsers = [];

    function formatLog(logEntry) {
      const message = logEntry.message || logEntry;
      const type = logEntry.type || 'info';
      let color = '#cccccc';
      let spinner = '';

      switch(type) {
        case 'success':
          color = '#89d185';
          break;
        case 'fail':
          color = '#f48771';
          break;
        case 'error':
          color = '#dcdcaa';
          break;
        case 'progress':
          color = '#858585';
          spinner = '<div class="spinner"></div>';
          break;
        default:
          color = '#cccccc';
      }

      return `<div class="terminal-line" data-type="${type}">${spinner}<span style="color: ${color};">${message}</span></div>`;
    }

    function updateResults(results, status) {
      if (!results || results.length === 0) return;

      const passCount = results.filter(r => r.status === 'PASS').length;
      const failCount = results.filter(r => r.status !== 'PASS').length;

      document.getElementById('status-pass').textContent = '✓ ' + passCount;
      document.getElementById('status-fail').textContent = '⚠ ' + failCount;

      // 結果をエディター部分に表示
      const cancelledLabel = status === 'cancelled' ? ' <span style="color: #dcdcaa; font-size: 16px;">(中止されました)</span>' : '';
      let summaryHtml = `
        <h1>チェック結果${cancelledLabel}</h1>
        <div class="summary-box">
          <strong>サマリー:</strong>
          合格: ${passCount} /
          不合格: ${failCount} /
          合計: ${results.length}
        </div>
      `;

      results.forEach(result => {
        const statusClass = result.status === 'PASS' ? 'pass' : (result.status === 'FAIL' ? 'fail' : 'error');
        const icon = result.status === 'PASS' ? '✓' : (result.status === 'FAIL' ? '✗' : '!');
        const iconColor = result.status === 'PASS' ? 'text-success' : (result.status === 'FAIL' ? 'text-danger' : 'text-warning');
        const badgeClass = result.status === 'PASS' ? 'badge-success' : (result.status === 'FAIL' ? 'badge-danger' : 'badge-warning');

        summaryHtml += `
          <div class="result-item ${statusClass}">
            <div class="result-header">
              <div class="result-title">
                <span class="${iconColor}">${icon}</span>
                <span>${result.check_number}: ${result.description}</span>
              </div>
              <span class="badge ${badgeClass}">${result.status}</span>
            </div>
            ${result.note ? `<div class="text-muted"><strong>補足:</strong> ${result.note}</div>` : ''}
          </div>
        `;
      });

      editorContent.innerHTML = summaryHtml;
    }

    function updateRegisteredUsers(registeredUsers) {
      if (!registeredUsers || registeredUsers.length === 0) return;

      // 既存のユーザー情報セクションを削除
      const existingUsersSection = editorContent.querySelector('[data-registered-users]');
      if (existingUsersSection) {
        existingUsersSection.remove();
      }

      let usersHtml = `
        <div data-registered-users style="margin-top: 20px; margin-bottom: 30px; padding: 20px; background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px;">
          <h2 style="color: #4ec9b0; font-size: 18px; margin-bottom: 15px;">登録済みユーザー情報</h2>
      `;

      registeredUsers.forEach((user, index) => {
        usersHtml += `
          <div style="margin-bottom: 15px; padding: 12px; background-color: #252526; border-left: 3px solid #007acc; border-radius: 2px;">
            <div style="color: #9cdcfe; font-weight: bold; margin-bottom: 5px;">ユーザー ${index + 1}</div>
            <div style="color: #ce9178; margin-bottom: 3px;">Email: ${user.email}</div>
            <div style="color: #ce9178;">Password: ${user.password}</div>
          </div>
        `;
      });

      usersHtml += `</div>`;

      // サマリーボックスの後に挿入、なければh1タグの後に挿入
      const summaryBox = editorContent.querySelector('.summary-box');
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = usersHtml;

      if (summaryBox) {
        summaryBox.parentNode.insertBefore(tempDiv.firstElementChild, summaryBox.nextSibling);
      } else {
        const h1 = editorContent.querySelector('h1');
        if (h1) {
          h1.parentNode.insertBefore(tempDiv.firstElementChild, h1.nextSibling);
        } else {
          editorContent.appendChild(tempDiv.firstElementChild);
        }
      }
    }

    function updateScreenshots(screenshots) {
      if (!screenshots || screenshots.length === 0) return;

      // 既存のスクリーンショットセクションを探す
      const screenshotSection = document.querySelector('[data-screenshot-section]');
      if (!screenshotSection) return;

      // スクリーンショットアイテムを追加
      screenshots.forEach(screenshot => {
        // 既に存在するか確認
        const existingItem = screenshotSection.querySelector(`[data-screenshot-path="${screenshot.path}"]`);
        if (!existingItem) {
          const itemDiv = document.createElement('div');
          itemDiv.className = 'sidebar-item';
          itemDiv.setAttribute('data-view', 'screenshot');
          itemDiv.setAttribute('data-screenshot-path', screenshot.path);
          itemDiv.setAttribute('data-screenshot-name', screenshot.name);
          itemDiv.innerHTML = `
            <span class="file-icon">🖼️</span>
            <span>${screenshot.name}</span>
          `;

          // クリックイベントを追加
          itemDiv.addEventListener('click', function() {
            document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('selected'));
            this.classList.add('selected');

            const tabBar = document.querySelector('.tab-bar');
            tabBar.innerHTML = `
              <div class="tab active">
                <span>🖼️</span>
                <span>${screenshot.name}</span>
              </div>
            `;

            editorContent.innerHTML = `
              <div style="padding: 20px;">
                <h2 style="margin-bottom: 20px; color: #cccccc;">${screenshot.name}</h2>
                <div style="background: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 10px; overflow: auto;">
                  <img src="${screenshot.path}" alt="${screenshot.name}" style="max-width: 100%; height: auto; display: block; border-radius: 4px;">
                </div>
              </div>
            `;
          });

          // セクションがcollapsed状態なら、アイテムを非表示に
          if (screenshotSection.classList.contains('collapsed')) {
            itemDiv.style.display = 'none';
          }

          screenshotSection.appendChild(itemDiv);
        }
      });
    }

    function updateFailureScreenshots(failureScreenshots) {
      if (!failureScreenshots || failureScreenshots.length === 0) return;

      // 既存のエラースクリーンショットセクションを探す
      const failureScreenshotSection = document.querySelector('[data-failure-screenshot-section]');
      if (!failureScreenshotSection) return;

      // エラースクリーンショットアイテムを追加
      failureScreenshots.forEach(screenshot => {
        // 既に存在するか確認
        const existingItem = failureScreenshotSection.querySelector(`[data-screenshot-path="${screenshot.path}"]`);
        if (!existingItem) {
          const itemDiv = document.createElement('div');
          itemDiv.className = 'sidebar-item';
          itemDiv.setAttribute('data-view', 'failure-screenshot');
          itemDiv.setAttribute('data-screenshot-path', screenshot.path);
          itemDiv.setAttribute('data-screenshot-name', screenshot.name);
          itemDiv.innerHTML = `
            <span class="file-icon">⚠️</span>
            <span>${screenshot.name}</span>
          `;

          // クリックイベントを追加
          itemDiv.addEventListener('click', function() {
            document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('selected'));
            this.classList.add('selected');

            const tabBar = document.querySelector('.tab-bar');
            tabBar.innerHTML = `
              <div class="tab active">
                <span>⚠️</span>
                <span>${screenshot.name}</span>
              </div>
            `;

            editorContent.innerHTML = `
              <div style="padding: 20px;">
                <h2 style="margin-bottom: 20px; color: #f48771;">${screenshot.name}</h2>
                <div style="background: #1e1e1e; border: 1px solid #d72828; border-radius: 4px; padding: 10px; overflow: auto;">
                  <img src="${screenshot.path}" alt="${screenshot.name}" style="max-width: 100%; height: auto; display: block; border-radius: 4px;">
                </div>
              </div>
            `;
          });

          // セクションがcollapsed状態なら、アイテムを非表示に
          if (failureScreenshotSection.classList.contains('collapsed')) {
            itemDiv.style.display = 'none';
          }

          failureScreenshotSection.appendChild(itemDiv);
        }
      });
    }

    function poll() {
      fetch(`/checks/${sessionId}/poll`)
        .then(response => response.json())
        .then(data => {
          // ログを更新
          if (data.logs && data.logs.length > 0) {
            // 全ログを再描画（progressログの上書きを反映するため）
            terminalLogs.innerHTML = '';
            data.logs.forEach(log => {
              terminalLogs.innerHTML += formatLog(log);
            });
            lastLogCount = data.logs.length;

            // ターミナルを最下部にスクロール
            terminalLogs.scrollTop = terminalLogs.scrollHeight;
          }

          // 登録済みユーザーを更新・保存
          if (data.registered_users && data.registered_users.length > 0) {
            currentRegisteredUsers = data.registered_users;
          }

          // 完了・エラー・中断時のみ結果を更新して表示
          if (data.status === 'completed' || data.status === 'error' || data.status === 'cancelled') {
            // 結果を更新
            if (data.results && data.results.length > 0) {
              updateResults(data.results, data.status);
            }

            // 登録済みユーザーを表示
            if (currentRegisteredUsers.length > 0) {
              updateRegisteredUsers(currentRegisteredUsers);
            }

            // スクリーンショットを更新
            if (data.screenshots && data.screenshots.length > 0) {
              updateScreenshots(data.screenshots);
            }

            // 失敗スクリーンショットを更新
            if (data.failure_screenshots && data.failure_screenshots.length > 0) {
              updateFailureScreenshots(data.failure_screenshots);
            }

            console.log('Check completed with status:', data.status);
          } else {
            // 実行中はポーリングを継続
            setTimeout(poll, 500); // 0.5秒ごとにポーリング
          }
        })
        .catch(error => {
          console.error('Polling error:', error);
          setTimeout(poll, 1000); // エラーの場合は1秒後にリトライ
        });
    }

    // 初回ポーリング開始
    poll();
  })();
</script>
<% end %>

<script>
  // サイドバーアイテムのクリックイベントを設定
  document.addEventListener('DOMContentLoaded', function() {
    // URL入力欄のバリデーション（震えるアニメーション）
    const searchForm = document.querySelector('.search-form-result');
    if (searchForm) {
      searchForm.addEventListener('submit', function(e) {
        const inputField = this.querySelector('.search-input-field');
        const inputWrapper = this.querySelector('.search-input-wrapper');
        const value = inputField ? inputField.value.trim() : '';

        // 空欄チェック
        if (!value) {
          e.preventDefault();
          shakeInput(inputWrapper, inputField);
          return;
        }

        // URL形式チェック（http://またはhttps://で始まるか）
        if (!value.match(/^https?:\/\/.+/i)) {
          e.preventDefault();
          shakeInput(inputWrapper, inputField);
          return;
        }
      });
    }

    function shakeInput(wrapper, field) {
      // 既存のshakeクラスを削除（アニメーションをリセット）
      wrapper.classList.remove('shake');

      // 少し待ってからshakeクラスを追加（アニメーションを再トリガー）
      setTimeout(() => {
        wrapper.classList.add('shake');
      }, 10);

      // アニメーション終了後にクラスを削除
      setTimeout(() => {
        wrapper.classList.remove('shake');
      }, 510);

      // 入力欄にフォーカス
      field.focus();
    }

    const sidebarItems = document.querySelectorAll('.sidebar-item');
    const editorContent = document.querySelector('.editor-content');
    const tabBar = document.querySelector('.tab-bar');

    // 元のコンテンツとタブを保存
    const originalContent = editorContent.innerHTML;
    const originalTab = tabBar.innerHTML;

    // READMEコンテンツ
    const readmeContent = `
      <h1 style="color: #4ec9b0; font-size: 28px; margin-bottom: 20px;">🔍 Protospace Checker</h1>

      <div style="margin-bottom: 30px;">
        <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">概要</h2>
        <p style="color: #cccccc; line-height: 1.8; margin-bottom: 16px;">
          Protospace CheckerはTECH CAMP課題「Protospace」の実装要件を自動的に検証するツールです。<br>
          Seleniumを使用してブラウザ操作を自動化し、各機能が正しく実装されているかをチェックします。
        </p>
      </div>

      <div style="margin-bottom: 30px;">
        <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">主な機能</h2>
        <ul style="color: #cccccc; line-height: 2; margin-left: 20px;">
          <li>✅ ユーザー新規登録・ログイン機能の検証</li>
          <li>✅ プロトタイプ投稿・編集・削除機能の検証</li>
          <li>✅ コメント投稿機能の検証</li>
          <li>✅ ユーザー詳細ページの検証</li>
          <li>📸 各ページのスクリーンショット自動取得</li>
          <li>🔄 リアルタイムでの進捗表示</li>
          <li>⏸️ チェック実行の途中停止機能</li>
        </ul>
      </div>

      <div style="margin-bottom: 30px;">
        <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">使い方</h2>
        <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px; margin-bottom: 16px;">
          <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 1</div>
          <p style="color: #cccccc; line-height: 1.8;">
            上部の検索バーに、チェック対象のProtospaceアプリケーションのURLを入力してください。<br>
            <span style="color: #ce9178;">例: https://protospace2020.herokuapp.com/</span>
          </p>
        </div>

        <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px; margin-bottom: 16px;">
          <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 2</div>
          <p style="color: #cccccc; line-height: 1.8;">
            緑色の再生ボタン <span style="color: #27c93f; font-weight: bold;">▶</span> をクリックしてチェックを開始します。
          </p>
        </div>

        <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px; margin-bottom: 16px;">
          <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 3</div>
          <p style="color: #cccccc; line-height: 1.8;">
            下部のターミナルで進捗を確認しながら、結果を待ちます。<br>
            途中で停止したい場合は、赤色の停止ボタン <span style="color: #c93333; font-weight: bold;">■</span> をクリックしてください。
          </p>
        </div>

        <div style="background-color: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 16px;">
          <div style="color: #858585; font-size: 12px; margin-bottom: 8px;">STEP 4</div>
          <p style="color: #cccccc; line-height: 1.8;">
            チェック完了後、結果ページで各項目の合格/不合格を確認できます。<br>
            サイドバーのSCREENSHOTSセクションから、各ページのスクリーンショットも確認可能です。
          </p>
        </div>
      </div>

      <div style="margin-bottom: 30px;">
        <h2 style="color: #569cd6; font-size: 20px; margin-bottom: 12px;">注意事項</h2>
        <div style="background-color: #3c2a1e; border-left: 3px solid #c9a000; padding: 16px; border-radius: 4px;">
          <p style="color: #dcdcaa; line-height: 1.8; margin-bottom: 8px;">
            ⚠️ チェック対象のアプリケーションが起動していることを確認してください
          </p>
          <p style="color: #dcdcaa; line-height: 1.8; margin-bottom: 8px;">
            ⚠️ データベースがリセット可能な状態であることを確認してください
          </p>
          <p style="color: #dcdcaa; line-height: 1.8;">
            ⚠️ チェック実行中は対象アプリケーションを操作しないでください
          </p>
        </div>
      </div>

      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #3c3c3c;">
        <p style="color: #858585; font-size: 12px; text-align: center;">
          Protospace Checker v1.0 | Built with Ruby on Rails & Selenium
        </p>
      </div>
    `;

    // サイドバーセクションの開閉機能
    const sectionTitles = document.querySelectorAll('.sidebar-section-title');
    sectionTitles.forEach(title => {
      title.addEventListener('click', function() {
        const section = this.parentElement;
        const chevron = this.querySelector('.chevron');
        const items = Array.from(section.children).filter(child => child.classList.contains('sidebar-item'));

        // 開閉状態をトグル
        const isCollapsed = section.classList.toggle('collapsed');

        if (isCollapsed) {
          chevron.textContent = '▶';
          items.forEach(item => item.style.display = 'none');
        } else {
          chevron.textContent = '▼';
          items.forEach(item => item.style.display = 'flex');
        }
      });

      // カーソルをポインターに
      title.style.cursor = 'pointer';
    });

    sidebarItems.forEach(item => {
      item.addEventListener('click', function() {
        // 選択状態を更新
        sidebarItems.forEach(i => i.classList.remove('selected'));
        this.classList.add('selected');

        const viewType = this.getAttribute('data-view');

        if (viewType === 'readme') {
          // タブを更新
          tabBar.innerHTML = `
            <div class="tab active">
              <span>📄</span>
              <span>README</span>
            </div>
          `;

          // READMEを表示
          editorContent.innerHTML = readmeContent;
        } else if (viewType === 'screenshot') {
          const screenshotPath = this.getAttribute('data-screenshot-path');
          const screenshotName = this.getAttribute('data-screenshot-name');

          // タブを更新
          tabBar.innerHTML = `
            <div class="tab active">
              <span>🖼️</span>
              <span>${screenshotName}</span>
            </div>
          `;

          // スクリーンショットを表示
          editorContent.innerHTML = `
            <div style="padding: 20px;">
              <h2 style="margin-bottom: 20px; color: #cccccc;">${screenshotName}</h2>
              <div style="background: #1e1e1e; border: 1px solid #3c3c3c; border-radius: 4px; padding: 10px; overflow: auto;">
                <img src="${screenshotPath}" alt="${screenshotName}" style="max-width: 100%; height: auto; display: block; border-radius: 4px;">
              </div>
            </div>
          `;
        } else if (viewType === 'failure-screenshot') {
          const screenshotPath = this.getAttribute('data-screenshot-path');
          const screenshotName = this.getAttribute('data-screenshot-name');

          // タブを更新
          tabBar.innerHTML = `
            <div class="tab active">
              <span>⚠️</span>
              <span>${screenshotName}</span>
            </div>
          `;

          // 失敗スクリーンショットを表示（赤いボーダー）
          editorContent.innerHTML = `
            <div style="padding: 20px;">
              <h2 style="margin-bottom: 20px; color: #f48771;">${screenshotName}</h2>
              <div style="background: #1e1e1e; border: 1px solid #d72828; border-radius: 4px; padding: 10px; overflow: auto;">
                <img src="${screenshotPath}" alt="${screenshotName}" style="max-width: 100%; height: auto; display: block; border-radius: 4px;">
              </div>
            </div>
          `;
        } else if (viewType === 'results') {
          // 元のコンテンツとタブに戻す
          tabBar.innerHTML = originalTab;
          editorContent.innerHTML = originalContent;
        }
      });
    });

    // パネルの開閉機能
    const panelToggle = document.querySelector('.panel-toggle');
    const panel = document.querySelector('.panel');

    if (panelToggle && panel) {
      let originalHeight = panel.offsetHeight;

      panelToggle.addEventListener('click', function() {
        // ボタンの状態を見て判断
        const isCurrentlyClosed = panelToggle.textContent === '^';

        if (isCurrentlyClosed) {
          // 開く
          panel.style.height = originalHeight + 'px';
          panelToggle.textContent = '⌄';
        } else {
          // 畳む
          originalHeight = panel.offsetHeight;
          panel.style.height = '35px';
          panelToggle.textContent = '^';
        }
      });
    }
  });
</script>
